; TITLE
;-------------------------------------------------------------
; @author {{meta.author}} {{meta.date}}


;-------------------------------------------------------------
; CONFIGURATION
;-------------------------------------------------------------
; tempo range 1 (fast) - 10 (slow)
; no exact BPM (apparently peaks at 150 bpm)

TEMPODELAY equ 4

; global normalization of sounds

soundTurnArray
	byte 8, 0, 5, 9
	byte 0, 6, 4, 0

;-------------------------------------------------------------
; Sound Type Array
;
; Required by Slocums renderer, this reserves
; eight of ten possible sounds for the track.
;
; Default Sound Type Setup:
; 000 0 Square  = 4
; 001 1 Bass    = 6
; 010 2 Pitfall = 7
; 011 3 Noise   = 8
;
; 100 4 Buzz    = 15
; 101 5 Lead    = 12
; 110 6 Saw     = 1
; 111 7 Engine  = 3
;

soundTypeArray
    byte 4,6,7,8
    byte 15,12,1,14

;-------------------------------------------------------------
; HATS
;
; Fucking convenient. Specify the pattern in 32nd notes below.
; 0 = silence, 1 = playing. This pattern is repeated for each
; measure, Slocums hi-hat render is short enough to disregard it
; when writing patterns for other channels.

hatPattern
	byte %10001000
	byte %10101010
	byte %10001000
	byte %10001010


HATSTART equ 6

HATVOLUME equ 5
HATPITCH equ 1
HATSOUND equ 8


;-------------------------------------------------------------
; SONG SEQUENCE
;
; "song1" and "song2" are constants for Slocums sequencer indicating
; each of the two oscillators we can use to work with two channels audio
; each sequence refers to a pattern defined below
;
; NOTE: max 255 patterns
; NOTE: 255 is required at the end of the list to indicate the end has been reached

song1
	byte 0,0	; silence

	byte 255	; end / loop


song2
	byte 0,0	; silence

	byte 255	; end / loop

;-------------------------------------------------------------
; SONG MEASURES
;
; Slocums sequencer defines "patternArrayH" for non-attenuated
; audio and "patternArrayL" for a reduced output
;
; each word contains a set of four patterns, effectively creating
; a full measure of music
;
; NOTE: each array can have a max of 64 sets of each 4 patterns
;
; index for patternArrayH starts at 0, patternArrayL at 128 (go figure)


; Higher volume patterns

patternArrayH

	word mute,mute,mute,mute				; 0

; Lower volume patterns

	
patternArrayL

;-------------------------------------------------------------
; PATTERNS:

; NICE TO KNOW:
;
; - each pattern lasts a quarter note and is divided into 8 steps
;   for 32nd notes
; - each step specifies pitch and soundtype
; - the pattern arrays defined above assemble the patterns in fours
;   to complete a full measure
;
; NOTE ENTRY:
;
; Each note is encoded with sound type and pitch (i.e. %00111000)
; with the first 3 bits shaping the sound type, remaining 5 bits for pitch
; (255/%11111111 == silence)
; 
; possible sound shapes (keep soundTypeArray defined above in mind, yo)
;
; 000 Square  (high square wave)
; 001 Bass    (fat bass sound)
; 010 Pitfall (sound of hitting a lot in pitfall)
; 011 Noise   (white noise)
; 100 Buzz    (hard buzzy sound)
; 101 Lead    (lower square wave)
; 110 Saw     (sounds kind of like a sawtooth wave)
; 111 Engine  (engine sound)
;
; ACCENTS:
;
; The ninth number at the end of each pattern defines which notes
; are accented. 0 = no accent, 1 = yep.
;
; Each of the 8 bits corresponds to each of the 8 notes defined in the pattern


; silence

mute
	byte 255,255,255,255
	byte 255,255,255,255

	byte 255
